#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 794)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'9,13,167,168,103,155,370,103,282,105,173,281,293,53,371,142,146,54,274',
'313,292,-177,106,154,137,139,143,145,40,94,48,1,314,10,12,174,21,29',
'35,357,44,49,2,9,13,15,102,138,141,34,317,148,149,132,133,135,136,-176',
'140,144,33,9,13,305,302,134,8,98,274,299,99,40,350,48,1,367,10,12,366',
'21,29,35,337,44,49,2,9,13,15,33,296,297,34,396,64,326,296,297,29,222',
'9,13,49,33,9,13,15,161,72,8,34,53,-112,325,40,54,48,1,343,10,12,33,21',
'29,35,154,44,49,2,9,13,15,155,119,-196,34,394,64,160,90,179,29,75,-123',
'94,49,33,-183,154,15,154,178,8,34,9,13,183,40,309,48,1,340,10,12,33',
'21,29,35,308,44,49,2,9,13,15,179,277,322,34,392,274,275,98,306,86,99',
'178,142,146,33,304,183,160,84,85,8,137,139,143,145,40,94,48,1,33,10',
'12,53,21,29,35,54,44,49,2,9,13,15,15,138,141,34,302,148,149,132,133',
'135,136,334,140,144,33,9,13,132,133,134,8,98,140,144,99,40,291,48,1',
'134,10,12,286,21,29,35,-130,44,49,2,9,13,15,33,335,53,34,271,64,54,179',
'179,29,222,274,360,49,33,140,144,15,178,178,8,34,134,183,183,40,367',
'48,1,366,10,12,33,21,29,35,283,44,49,2,9,13,15,-178,72,33,34,33,-130',
'-130,-130,-130,249,148,149,132,133,33,9,13,140,144,295,8,342,296,297',
'134,205,206,208,189,191,64,195,197,200,239,243,248,207,247,232,9,13',
'15,225,199,202,244,347,64,132,133,188,29,222,140,144,49,33,9,13,15,134',
'190,194,34,140,144,105,40,172,48,1,134,10,12,33,21,29,35,306,44,49,2',
'9,13,15,123,354,315,34,117,64,274,275,-182,29,222,-177,-180,49,33,9',
'13,15,300,72,8,34,274,299,-178,40,332,48,1,363,10,12,33,21,29,35,-122',
'44,49,2,9,13,15,-181,364,338,34,381,64,274,299,331,29,75,-179,-176,49',
'33,372,-183,15,86,375,8,34,376,123,249,40,379,48,1,121,10,12,33,21,29',
'35,119,44,49,2,9,13,15,330,382,117,34,329,-178,383,9,13,-179,109,113',
'-227,-196,33,-40,-40,-40,-40,107,8,59,60,61,57,40,385,48,1,112,10,12',
'-129,21,29,35,92,44,49,2,64,388,15,-184,29,75,34,390,49,9,13,302,15',
'72,117,78,34,33,-96,9,13,-179,56,8,397,398,,33,,9,13,65,,72,,78,-44',
'-44,-44,-44,,,64,,,,29,75,,,49,65,64,53,15,68,29,129,34,44,49,83,64',
',15,,29,75,34,33,49,,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78',
',,,9,13,65,,72,,78,-38,-38,-38,-38,,65,64,,,,29,75,,,49,65,64,,15,68',
'29,75,34,,49,83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83',
'78,,284,148,149,132,133,33,,,140,144,142,146,,,65,134,,,,137,139,143',
'145,,,64,,,,29,75,,,49,,9,13,15,68,72,,34,138,141,83,,148,149,132,133',
'135,136,33,140,144,9,13,,,72,134,78,,,,9,13,,64,72,,78,29,222,,,49,65',
',,15,,,,34,,,65,64,,,,29,75,,33,49,,64,,15,68,29,75,34,,49,83,,,15,68',
'9,13,34,33,72,83,78,,,,9,13,,33,72,,78,59,60,61,57,,65,,,,,,,,,,65,64',
',,,29,75,,,49,,64,,15,68,29,75,34,,49,83,,,15,68,9,13,34,33,72,83,78',
',,,9,13,,33,72,152,78,,,,9,13,65,278,,,,369,,,,,65,64,,,,29,75,,,49',
',64,,15,68,29,75,34,,49,83,64,,15,68,29,222,34,33,49,83,,,15,,9,13,34',
'33,72,,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,78,,,,,,65,64,,,,29,75',
',,49,65,64,,15,68,29,75,34,,49,83,64,,15,68,29,75,34,33,49,83,,,15,68',
'9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,78,,,,,,65,64',
',,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15,68,29,75,34,33,49',
'83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65,,72,,78',
',,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15,68,29,75',
'34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72,,78,,,,9,13,65',
',72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49,83,64,,15',
'68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,,,,,,,9',
'13,65,,72,,78,,,,,,,64,,,,29,75,,,49,65,64,53,15,68,29,129,34,44,49',
'83,64,,15,,29,75,34,33,49,,,,15,68,9,13,34,33,72,83,78,,,,9,13,,33,72',
',78,,,,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34',
',49,83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,,9',
'13,,33,72,,78,,,,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15',
'68,29,75,34,,49,83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72',
'83,78,,,,9,13,,33,72,,78,,,,9,13,65,,,,223,,,,,,65,64,,,,29,75,,,49',
',64,,15,68,29,75,34,,49,83,64,,15,68,29,222,34,33,49,83,,,15,,9,13,34',
'33,72,,78,,,,,,,33,,,,9,13,,,72,65,78,,,,,,,,,,64,,,,29,75,65,226,49',
',,,15,68,,,34,64,,83,,29,75,,,49,,33,,15,68,,,34,9,13,83,,72,152,78',
',,,33,,,,,,,9,13,,,72,65,78,,,,,,,,,,64,,,,29,75,65,,49,,,,15,68,,,34',
'64,,83,,29,75,,,49,,33,,15,68,9,13,34,,72,83,78,,,,9,13,,33,72,,78,',
',,9,13,65,,72,,78,,,,,,65,64,,,,29,75,,,49,65,64,,15,68,29,75,34,,49',
'83,64,,15,68,29,75,34,33,49,83,,,15,68,9,13,34,33,72,83,78,,,230,,,',
'33,,,,,142,146,,,65,,,,,137,139,143,145,,,64,,,,29,75,,,49,,,,15,68',
',,34,138,141,83,,148,149,132,133,135,136,33,140,144,147,,,,,134,,,,142',
'146,,,,,229,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138',
'141,,,148,149,132,133,135,136,,140,144,,,138,141,,134,148,149,132,133',
'135,136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,253',
'137,139,143,145,,,,,138,141,,,148,149,132,133,135,136,,140,144,,,138',
'141,,134,148,149,132,133,135,136,,140,144,142,146,,,,134,,,,137,139',
'143,145,,,142,146,,,,,,,,137,139,143,145,,,,,,141,,,148,149,132,133',
'135,136,,140,144,,,138,141,,134,148,149,132,133,135,136,,140,144,142',
'146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138',
'141,,,148,149,132,133,135,136,,140,144,,,,,,134,148,149,132,133,135',
'136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,,137',
'139,143,145,,,,,,,,,148,149,132,133,135,136,,140,144,,,138,141,,134',
'148,149,132,133,135,136,,140,144,142,146,,,,134,,,,137,139,143,145,',
',142,146,,,,,,,,137,139,143,145,,,,,138,141,,,148,149,132,133,135,136',
',140,144,,,138,141,,134,148,149,132,133,135,136,,140,144,142,146,,,',
'134,,,,137,139,143,145,,,142,146,,,,,,,,137,139,143,145,,,,,138,141',
',,148,149,132,133,135,136,,140,144,,,138,141,,134,148,149,132,133,135',
'136,,140,144,142,146,,,,134,,,,137,139,143,145,,,142,146,,,,,,,,137',
'139,143,145,,,,,138,141,146,,148,149,132,133,135,136,137,140,144,,,',
',146,134,148,149,132,133,135,136,137,140,144,,,,,,134,,146,,148,149',
'132,133,135,136,137,140,144,,,,,146,134,148,149,132,133,135,136,137',
'140,144,,,,,,134,,,,148,149,132,133,135,136,,140,144,,,,,,134,148,149',
'132,133,135,136,,140,144,205,206,208,189,191,134,195,197,200,201,215',
',207,209,,,,,,199,202,204,205,206,208,189,191,,195,197,200,201,215,',
'207,209,,190,194,,,199,202,204,205,206,208,189,191,,195,197,200,201',
'203,,207,209,,190,194,,,199,202,204,205,206,208,189,191,,195,197,200',
'201,203,,207,209,,190,194,,,199,202,204,205,206,208,189,191,,195,197',
'200,201,203,,207,209,,190,194,,,199,202,204,205,206,208,189,191,,195',
'197,200,201,215,,207,209,,190,194,,,199,202,204,148,149,132,133,135',
'136,,140,144,,,,,,134,190,194,148,149,132,133,135,136,,140,144,,,,,',
'134' ]
        racc_action_table = arr = ::Array.new(2419, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,88,88,71,75,320,23,156,23,95,156,177,12,320,88,88,12,227,227,177',
'71,23,75,88,88,88,88,0,174,0,0,227,0,0,95,0,0,0,307,0,0,0,229,229,0',
'23,88,88,0,229,88,88,88,88,88,88,237,88,88,0,230,230,210,236,88,0,174',
'279,279,174,229,294,229,229,317,229,229,317,229,229,229,279,229,229',
'229,390,390,229,174,210,210,229,390,230,235,294,294,230,230,78,78,230',
'229,309,309,230,78,309,229,230,286,243,233,390,286,390,390,286,390,390',
'230,390,390,390,243,390,390,390,388,388,390,129,232,129,390,388,309',
'78,14,179,309,309,226,173,309,390,14,222,309,129,179,390,309,281,281',
'179,388,219,388,388,281,388,388,309,388,388,388,215,388,388,388,380',
'380,388,106,153,231,388,380,153,153,173,212,10,173,106,231,231,388,198',
'106,281,10,10,388,231,231,231,231,380,21,380,380,173,380,380,22,380',
'380,380,22,380,380,380,269,269,380,22,231,231,380,193,231,231,231,231',
'231,231,270,231,231,380,361,361,273,273,231,380,21,273,273,21,269,175',
'269,269,273,269,269,166,269,269,269,315,269,269,269,147,147,269,21,275',
'1,269,147,361,1,102,298,361,361,311,311,361,269,254,254,361,102,298',
'269,361,254,102,298,147,364,147,147,364,147,147,361,147,147,147,158',
'147,147,147,121,121,147,242,121,144,147,140,315,315,315,315,123,257',
'257,257,257,147,370,370,257,257,184,147,285,184,184,257,121,121,121',
'121,121,121,121,121,121,121,121,122,121,121,118,291,291,121,110,121',
'121,121,291,370,272,272,104,370,370,272,272,370,121,223,223,370,272',
'121,121,370,255,255,100,291,92,291,291,255,291,291,370,291,291,291,301',
'291,291,291,26,26,291,87,303,228,291,82,223,228,228,81,223,223,238,79',
'223,291,225,225,223,187,225,291,223,187,187,77,26,251,26,26,313,26,26',
'223,26,26,26,314,26,26,26,342,342,26,74,316,280,26,342,225,280,280,250',
'225,225,73,69,225,26,324,67,225,64,327,26,225,328,55,332,342,333,342',
'342,50,342,342,225,342,342,342,48,342,342,342,248,248,342,249,346,45',
'342,248,36,352,35,35,30,28,35,360,35,342,4,4,4,4,24,342,5,5,5,5,248',
'362,248,248,35,248,248,239,248,248,248,20,248,248,248,35,367,248,247',
'35,35,248,371,35,8,8,374,35,8,246,8,35,248,244,58,58,240,2,248,393,395',
',35,,40,40,8,,40,,40,11,11,11,11,,,8,,,,8,8,,,8,40,58,58,8,8,58,58,8',
'58,58,8,40,,58,,40,40,58,8,40,,,,40,40,44,44,40,58,44,40,44,,,,283,283',
',40,283,,283,,,,167,167,44,,167,,167,47,47,47,47,,283,44,,,,44,44,,',
'44,167,283,,44,44,283,283,44,,283,44,167,,283,283,167,167,283,44,167',
'283,,,167,167,330,330,167,283,330,167,330,,165,258,258,258,258,167,',
',258,258,165,165,,,330,258,,,,165,165,165,165,,,330,,,,330,330,,,330',
',325,325,330,330,325,,330,165,165,330,,165,165,165,165,165,165,330,165',
'165,65,65,,,65,165,65,,,,276,276,,325,276,,276,325,325,,,325,65,,,325',
',,,325,,,276,65,,,,65,65,,325,65,,276,,65,65,276,276,65,,276,65,,,276',
'276,13,13,276,65,13,276,13,,,,155,155,,276,155,,155,16,16,16,16,,13',
',,,,,,,,,155,13,,,,13,13,,,13,,155,,13,13,155,155,13,,155,13,,,155,155',
'154,154,155,13,154,155,154,,,,72,72,,155,72,72,72,,,,318,318,154,154',
',,,318,,,,,72,154,,,,154,154,,,154,,72,,154,154,72,72,154,,72,154,318',
',72,72,318,318,72,154,318,72,,,318,,149,149,318,72,149,,149,,,,148,148',
',318,148,,148,,,,146,146,149,,146,,146,,,,,,148,149,,,,149,149,,,149',
'146,148,,149,149,148,148,149,,148,149,146,,148,148,146,146,148,149,146',
'148,,,146,146,308,308,146,148,308,146,308,,,,145,145,,146,145,,145,',
',,304,304,308,,304,,304,,,,,,145,308,,,,308,308,,,308,304,145,,308,308',
'145,145,308,,145,308,304,,145,145,304,304,145,308,304,145,,,304,304',
'83,83,304,145,83,304,83,,,,84,84,,304,84,,84,,,,85,85,83,,85,,85,,,',
',,84,83,,,,83,83,,,83,85,84,,83,83,84,84,83,,84,83,85,,84,84,85,85,84',
'83,85,84,,,85,85,86,86,85,84,86,85,86,,,,143,143,,85,143,,143,,,,366',
'366,86,,366,,366,,,,,,143,86,,,,86,86,,,86,366,143,,86,86,143,143,86',
',143,86,366,,143,143,366,366,143,86,366,143,,,366,366,90,90,366,143',
'90,366,90,,,,91,91,,366,,,,,,,142,142,90,,142,,142,,,,,,,90,,,,90,90',
',,90,142,91,91,90,90,91,91,90,91,91,90,142,,91,,142,142,91,90,142,,',
',142,142,141,141,142,91,141,142,141,,,,139,139,,142,139,,139,,,,138',
'138,141,,138,,138,,,,,,139,141,,,,141,141,,,141,138,139,,141,141,139',
'139,141,,139,141,138,,139,139,138,138,139,141,138,139,,,138,138,103',
'103,138,139,103,138,103,,,,293,293,,138,293,,293,,,,137,137,103,,137',
',137,,,,,,293,103,,,,103,103,,,103,137,293,,103,103,293,293,103,,293',
'103,137,,293,293,137,137,293,103,137,293,,,137,137,136,136,137,293,136',
'137,136,,,,135,135,,137,135,,135,,,,109,109,136,,,,109,,,,,,135,136',
',,,136,136,,,136,,135,,136,136,135,135,136,,135,136,109,,135,135,109',
'109,135,136,109,135,,,109,,292,292,109,135,292,,292,,,,,,,109,,,,112',
'112,,,112,292,112,,,,,,,,,,292,,,,292,292,112,112,292,,,,292,292,,,292',
'112,,292,,112,112,,,112,,292,,112,112,,,112,113,113,112,,113,113,113',
',,,112,,,,,,,134,134,,,134,113,134,,,,,,,,,,113,,,,113,113,134,,113',
',,,113,113,,,113,134,,113,,134,134,,,134,,113,,134,134,133,133,134,',
'133,134,133,,,,117,117,,134,117,,117,,,,132,132,133,,132,,132,,,,,,117',
'133,,,,133,133,,,133,132,117,,133,133,117,117,133,,117,133,132,,117',
'117,132,132,117,133,132,117,,,132,132,68,68,132,117,68,132,68,,,116',
',,,132,,,,,116,116,,,68,,,,,116,116,116,116,,,68,,,,68,68,,,68,,,,68',
'68,,,68,116,116,68,,116,116,116,116,116,116,68,116,116,66,,,,,116,,',
',66,66,,,,,114,,,66,66,66,66,,,114,114,,,,,,,,114,114,114,114,,,,,66',
'66,,,66,66,66,66,66,66,,66,66,,,114,114,,66,114,114,114,114,114,114',
',114,114,170,170,,,,114,,,,170,170,170,170,,,131,131,,,,,,,131,131,131',
'131,131,,,,,170,170,,,170,170,170,170,170,170,,170,170,,,131,131,,170',
'131,131,131,131,131,131,,131,131,260,260,,,,131,,,,260,260,260,260,',
',355,355,,,,,,,,355,355,355,355,,,,,,260,,,260,260,260,260,260,260,',
'260,260,,,355,355,,260,355,355,355,355,355,355,,355,355,358,358,,,,355',
',,,358,358,358,358,,,349,349,,,,,,,,349,349,349,349,,,,,358,358,,,358',
'358,358,358,358,358,,358,358,,,,,,358,349,349,349,349,349,349,,349,349',
'348,348,,,,349,,,,348,348,348,348,,,341,341,,,,,,,,341,341,341,341,',
',,,,,,,348,348,348,348,348,348,,348,348,,,341,341,,348,341,341,341,341',
'341,341,,341,341,336,336,,,,341,,,,336,336,336,336,,,164,164,,,,,,,',
'164,164,164,164,,,,,336,336,,,336,336,336,336,336,336,,336,336,,,164',
'164,,336,164,164,164,164,164,164,,164,164,163,163,,,,164,,,,163,163',
'163,163,,,377,377,,,,,,,,377,377,377,377,,,,,163,163,,,163,163,163,163',
'163,163,,163,163,,,377,377,,163,377,377,377,377,377,377,,377,377,151',
'151,,,,377,,,,151,151,151,151,,,263,263,,,,,,,,263,263,263,263,,,,,151',
'151,265,,151,151,151,151,151,151,265,151,151,,,,,264,151,263,263,263',
'263,263,263,264,263,263,,,,,,263,,267,,265,265,265,265,265,265,267,265',
'265,,,,,261,265,264,264,264,264,264,264,261,264,264,,,,,,264,,,,267',
'267,267,267,267,267,,267,267,,,,,,267,261,261,261,261,261,261,,261,261',
'107,107,107,107,107,261,107,107,107,107,107,,107,107,,,,,,107,107,107',
'306,306,306,306,306,,306,306,306,306,306,,306,306,,107,107,,,306,306',
'306,105,105,105,105,105,,105,105,105,105,105,,105,105,,306,306,,,105',
'105,105,302,302,302,302,302,,302,302,302,302,302,,302,302,,105,105,',
',302,302,302,326,326,326,326,326,,326,326,326,326,326,,326,326,,302',
'302,,,326,326,326,188,188,188,188,188,,188,188,188,188,188,,188,188',
',326,326,,,188,188,188,259,259,259,259,259,259,,259,259,,,,,,259,188',
'188,268,268,268,268,268,268,,268,268,,,,,,268' ]
        racc_action_check = arr = ::Array.new(2419, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   227,   494,   nil,   428,   434,   nil,   nil,   523,   nil,
   178,   489,   -23,   777,   124,   nil,   733,   nil,   nil,   nil,
   512,   199,   171,     1,   487,   nil,   385,   nil,   463,   nil,
   462,   nil,   nil,   nil,   nil,   481,   458,   nil,   nil,   nil,
   543,   nil,   nil,   nil,   590,   472,   nil,   556,   467,   nil,
   454,   nil,   nil,   nil,   nil,   432,   nil,   nil,   533,   nil,
   nil,   nil,   nil,   nil,   445,   720,  1692,   426,  1635,   422,
   nil,    -2,   844,   421,   410,    -1,   nil,   391,    98,   379,
   nil,   375,   388,  1035,  1045,  1055,  1102,   366,    -2,   nil,
  1169,  1179,   373,   nil,   nil,    -2,   nil,   nil,   nil,   nil,
   363,   nil,   244,  1303,   347,  2269,   151,  2225,   nil,  1390,
   335,   nil,  1454,  1504,  1707,   nil,  1638,  1578,   331,   nil,
   nil,   299,   332,   278,   nil,   nil,   nil,   nil,   nil,   126,
   nil,  1767,  1588,  1568,  1521,  1380,  1370,  1323,  1256,  1246,
   246,  1236,  1189,  1112,   244,   978,   921,   256,   911,   901,
   nil,  2112,   nil,   169,   834,   787,    -1,   nil,   286,   nil,
   nil,   nil,   nil,  2052,  2007,   660,   213,   610,   nil,   nil,
  1752,   nil,   nil,   142,    27,   236,   nil,    -6,   nil,   116,
   nil,   nil,   nil,   nil,   277,   nil,   nil,   401,  2335,   nil,
   nil,   nil,   nil,   210,   nil,   nil,   nil,   nil,   179,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    41,   nil,   171,   nil,   nil,   116,   nil,   nil,   nil,   147,
   nil,   nil,   124,   360,   nil,   403,   120,     7,   385,    41,
    59,   170,   131,    72,   nil,    75,    52,    34,   378,   485,
   514,   nil,   281,   101,   511,   nil,   524,   496,   471,   461,
   416,   404,   nil,   nil,   216,   309,   nil,   261,   615,  2334,
  1812,  2193,   nil,  2127,  2160,  2145,   nil,  2178,  2351,   213,
   220,   nil,   298,   180,   nil,   255,   730,   nil,   nil,    57,
   428,   152,   nil,   600,   nil,   317,    75,   nil,   nil,   nil,
   nil,   342,  1437,  1313,    47,   nil,   nil,   nil,   245,   nil,
   nil,   371,  2291,   382,   988,   nil,  2247,    30,   968,   102,
   nil,   261,   nil,   394,   403,   246,   425,    44,   854,   nil,
    -6,   nil,   nil,   nil,   439,   700,  2313,   443,   446,   nil,
   657,   nil,   422,   434,   nil,   nil,  1992,   nil,   nil,   nil,
   nil,  1947,   428,   nil,   nil,   nil,   468,   nil,  1932,  1887,
   nil,   nil,   473,   nil,   nil,  1827,   nil,   nil,  1872,   nil,
   479,   231,   493,   nil,   256,   nil,  1122,   509,   nil,   nil,
   317,   515,   nil,   nil,   515,   nil,   nil,  2067,   nil,   nil,
   170,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,
    84,   nil,   nil,   531,   nil,   532,   nil,   nil,   nil ]

racc_action_default = [
  -205,  -240,   -74,   -19,    -8,   -20,    -9,  -185,  -240,  -124,
  -220,   -10,  -197,  -240,  -238,   -98,  -240,   -11,  -176,   -12,
  -240,  -240,  -240,  -177,   -39,   -13,    -1,  -181,  -240,  -129,
   -41,   -14,    -2,  -228,   -96,   -97,   -42,   -15,    -3,  -180,
  -240,   -43,   -16,  -182,  -240,   -45,   -17,    -6,  -240,  -184,
  -240,   -18,    -7,  -197,  -196,  -205,   -75,   -49,  -240,   -46,
   -47,   -48,  -142,  -141,  -220,  -240,  -240,  -238,  -240,   -59,
   -66,   -60,  -240,   -63,   -61,   -97,   -64,   -58,  -240,   -67,
   -62,   -68,   -65,  -240,  -240,  -240,  -240,  -205,  -240,  -125,
  -240,  -240,  -240,  -204,  -202,  -205,  -198,  -200,  -201,  -203,
  -240,   -73,  -205,  -240,   -77,  -109,  -205,  -119,    -4,  -240,
   -53,   -54,  -240,  -240,  -240,  -134,  -240,  -240,  -189,  -186,
  -187,  -109,  -240,  -206,  -207,   -40,   -44,   -37,   -39,   -97,
   -38,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,  -240,
  -159,   -56,  -223,  -240,  -240,  -240,  -240,  -232,  -240,  -236,
  -235,  -231,  -152,  -106,  -108,  -240,  -205,  -240,  -127,  -126,
  -107,   -36,   399,  -240,  -240,  -240,  -214,  -240,  -220,  -205,
   -90,   -89,   -80,   -97,  -240,   -81,   -83,  -240,  -119,   -25,
   -29,   -27,  -113,  -226,   -35,   -23,  -110,   -31,  -240,   -33,
   -32,  -114,   -21,  -112,   -34,   -28,   -26,   -22,   -30,   -24,
  -240,  -117,  -226,  -118,  -120,  -112,  -183,  -177,  -179,  -240,
  -178,  -170,   -97,  -240,  -171,  -240,   -52,  -240,  -240,  -240,
  -240,  -240,  -240,   -94,   -92,  -240,  -226,  -100,  -101,  -114,
  -103,  -104,   -99,   -97,   -34,  -102,  -105,   -24,  -240,  -213,
  -240,  -226,  -210,  -162,  -149,  -148,  -143,  -150,  -151,  -154,
  -161,  -156,  -144,  -160,  -158,  -155,  -145,  -157,  -153,    -5,
  -240,  -133,  -146,  -147,  -224,  -225,  -240,  -221,  -123,  -240,
  -240,  -240,  -229,  -240,  -237,  -240,  -240,  -216,  -128,  -199,
  -215,  -240,  -240,  -240,  -240,   -78,   -86,   -85,  -240,  -225,
  -131,  -226,  -227,  -240,  -240,   -79,  -227,  -240,  -240,  -240,
  -173,  -226,   -55,  -225,   -50,  -221,  -240,  -137,  -240,  -164,
  -240,  -168,  -239,  -188,  -240,   -95,  -109,  -240,  -240,  -191,
  -240,  -208,  -227,  -240,  -132,  -222,   -57,  -122,  -130,  -233,
  -230,  -234,  -240,  -219,  -218,  -217,  -240,  -195,   -87,   -88,
   -84,   -82,  -240,  -111,   -71,  -115,  -121,   -72,  -116,  -175,
  -225,  -240,  -240,   -51,  -137,  -136,  -240,  -240,  -165,  -163,
  -240,  -240,   -69,   -93,  -226,   -70,  -190,  -212,  -211,  -209,
  -240,  -193,  -194,   -76,  -174,  -172,  -135,  -138,  -240,  -169,
  -240,   -91,  -192,  -240,  -140,  -240,  -167,  -139,  -166 ]

racc_goto_table = [
    23,    26,    55,    27,   115,   111,   224,   252,   234,   108,
   157,   241,   120,    87,    39,   193,   219,    89,   270,   153,
   184,    32,   100,    96,   210,   211,    23,   319,   303,    27,
   101,   236,    93,   212,   104,   365,   125,    58,   318,   356,
    39,   127,   126,   351,    14,   122,   221,   307,    91,   169,
   187,   311,   324,    45,   118,   233,   285,    95,    23,   227,
   228,    27,   175,   361,   290,   250,   130,    18,   251,   125,
    14,   327,    39,   110,   171,   126,   124,   166,   345,    45,
   156,    43,   386,    20,   nil,   nil,   333,   nil,   nil,   nil,
   nil,    23,   nil,    18,    27,   nil,   nil,   294,   nil,   130,
   316,   279,   280,   nil,   nil,    39,   211,    43,   124,   217,
   nil,    45,    27,   nil,   301,   368,   176,   nil,   nil,   328,
   310,   238,   nil,    39,    27,    18,   nil,   nil,    41,   nil,
   219,    24,   nil,   nil,   nil,    39,   352,   321,   nil,    43,
   nil,   nil,   nil,   nil,    45,   nil,   362,    23,   nil,   nil,
    27,   262,   nil,   216,    41,   266,   nil,    24,    18,   nil,
   nil,    39,   346,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   nil,   288,    43,   180,   246,   289,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,    93,    41,   287,   237,   128,
    43,    14,   nil,   nil,   nil,   312,   323,   nil,   nil,   nil,
    45,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,   391,
   nil,   nil,   373,   339,    18,   241,   378,   nil,   nil,    41,
   353,   nil,   128,   217,   211,   321,    27,   nil,    43,    23,
   217,   nil,    27,    27,   nil,   nil,   374,    39,   nil,   nil,
   nil,   nil,   nil,    39,    39,   nil,   180,   nil,    23,   245,
   nil,    27,   108,   nil,   nil,   nil,   nil,   nil,   384,   393,
   nil,   395,    39,   nil,   nil,   nil,   nil,   216,   219,    23,
   nil,   nil,    27,    14,   216,    41,   nil,   389,    24,   359,
   nil,   nil,    45,    39,   nil,   nil,   nil,   344,   nil,   nil,
    18,    23,    14,   nil,    27,   nil,    18,    18,   nil,   nil,
   nil,    45,   nil,   nil,    43,    39,   nil,   nil,   nil,   nil,
    43,    43,   nil,    14,   nil,    18,   nil,   nil,   217,   nil,
   nil,    27,    45,   nil,   nil,   238,   nil,   nil,    27,    43,
   387,   nil,    39,   nil,   nil,    14,    18,   nil,   nil,    39,
   nil,   nil,    23,   380,    45,    27,   nil,   nil,   nil,   nil,
    43,   nil,   nil,   nil,   nil,   nil,    39,    41,    18,   nil,
    24,   217,   216,   108,    27,   180,   nil,   nil,   nil,   nil,
   217,   nil,    43,    27,   nil,    39,    41,    30,   246,    24,
    23,    36,   nil,    27,    39,    18,    14,   nil,    23,   nil,
    23,    27,   237,    27,    39,    45,   nil,    41,   nil,    43,
    24,   nil,    39,    30,    39,   216,    43,    36,   nil,    18,
   nil,   nil,   nil,   nil,   216,   nil,   nil,   nil,   nil,    41,
   nil,   nil,    24,    43,    14,   nil,   nil,   nil,    18,   nil,
   nil,   nil,    14,    45,    14,    30,   nil,    18,   nil,    36,
   nil,    45,    43,    45,   nil,   nil,   nil,    18,   nil,   nil,
   nil,    43,   nil,   245,   nil,    18,   nil,    18,   nil,   159,
   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,    30,    43,
    41,    43,    36,    24,   nil,   nil,   nil,   nil,   nil,   181,
   nil,   nil,   nil,   181,   nil,   nil,   218,   nil,   nil,   nil,
   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,   nil,
   nil,   nil,   242,   nil,   nil,   nil,   nil,    66,    41,   nil,
   nil,    24,    88,   nil,   nil,   nil,    41,   nil,    41,    24,
   nil,    24,   nil,   nil,    30,   nil,   nil,   nil,    36,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   114,
   nil,   nil,   nil,   116,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   131,   nil,   nil,   150,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   162,   163,   164,   165,   nil,   nil,   nil,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   218,   nil,   nil,   nil,   220,   nil,    30,   218,   nil,   nil,
    36,   220,   nil,   nil,   nil,   nil,   231,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,   nil,    36,
   nil,   254,   255,   256,   257,   258,   259,   260,   261,   nil,
   263,   264,   265,   nil,   267,   268,    30,   272,   273,   nil,
    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   159,   nil,   nil,   nil,    88,   nil,    30,   nil,
   nil,   nil,    36,   nil,   nil,   181,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   220,
   nil,   nil,   240,   nil,   nil,   nil,   242,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   218,   nil,
   nil,   nil,   220,   nil,   nil,   nil,   nil,   218,   nil,   nil,
   nil,   220,   nil,   nil,   nil,   nil,   nil,    30,   nil,   nil,
   nil,    36,   nil,   nil,   nil,    30,   nil,    30,   nil,    36,
   nil,    36,   nil,   nil,   nil,   336,   nil,   nil,   nil,   nil,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   348,   349,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   355,   nil,   nil,   nil,   358,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   377,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   114 ]

racc_goto_check = [
    35,     2,    40,    36,    62,    31,    71,    83,    53,     4,
    86,    37,    73,    40,    38,    43,    69,    60,     5,    29,
    48,     3,    35,    79,    48,    56,    35,    67,    44,    36,
     6,    43,    65,    45,    47,    63,     8,    23,    66,    59,
    38,    22,    10,    49,    55,    75,    70,    44,    23,    61,
    29,    72,    42,    28,    74,    41,    76,    77,    35,    29,
    29,    36,    78,    33,    80,    81,     6,    34,    82,     8,
    55,    44,    38,    30,    22,    10,     3,    75,    84,    28,
    85,    39,    63,     1,   nil,   nil,    44,   nil,   nil,   nil,
   nil,    35,   nil,    34,    36,   nil,   nil,    48,   nil,     6,
     5,    29,    29,   nil,   nil,    38,    56,    39,     3,    35,
   nil,    28,    36,   nil,    45,    67,     3,   nil,   nil,     5,
    71,    35,   nil,    38,    36,    34,   nil,   nil,    27,   nil,
    69,    24,   nil,   nil,   nil,    38,    44,    69,   nil,    39,
   nil,   nil,   nil,   nil,    28,   nil,    44,    35,   nil,   nil,
    36,    65,   nil,    55,    27,    65,   nil,    24,    34,   nil,
   nil,    38,     5,   nil,   nil,   nil,   nil,   nil,   nil,    34,
   nil,    60,    39,    34,    28,    79,    34,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    65,    65,    27,     3,    34,    24,
    39,    55,   nil,   nil,   nil,    31,    73,   nil,   nil,   nil,
    28,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,    44,
   nil,   nil,    53,    86,    34,    37,    83,   nil,   nil,    27,
    56,   nil,    24,    35,    56,    69,    36,   nil,    39,    35,
    35,   nil,    36,    36,   nil,   nil,    43,    38,   nil,   nil,
   nil,   nil,   nil,    38,    38,   nil,    34,   nil,    35,    27,
   nil,    36,     4,   nil,   nil,   nil,   nil,   nil,    71,     5,
   nil,     5,    38,   nil,   nil,   nil,   nil,    55,    69,    35,
   nil,   nil,    36,    55,    55,    27,   nil,    69,    24,    31,
   nil,   nil,    28,    38,   nil,   nil,   nil,    40,   nil,   nil,
    34,    35,    55,   nil,    36,   nil,    34,    34,   nil,   nil,
   nil,    28,   nil,   nil,    39,    38,   nil,   nil,   nil,   nil,
    39,    39,   nil,    55,   nil,    34,   nil,   nil,    35,   nil,
   nil,    36,    28,   nil,   nil,    35,   nil,   nil,    36,    39,
    62,   nil,    38,   nil,   nil,    55,    34,   nil,   nil,    38,
   nil,   nil,    35,     2,    28,    36,   nil,   nil,   nil,   nil,
    39,   nil,   nil,   nil,   nil,   nil,    38,    27,    34,   nil,
    24,    35,    55,     4,    36,    34,   nil,   nil,   nil,   nil,
    35,   nil,    39,    36,   nil,    38,    27,    25,    28,    24,
    35,    26,   nil,    36,    38,    34,    55,   nil,    35,   nil,
    35,    36,    34,    36,    38,    28,   nil,    27,   nil,    39,
    24,   nil,    38,    25,    38,    55,    39,    26,   nil,    34,
   nil,   nil,   nil,   nil,    55,   nil,   nil,   nil,   nil,    27,
   nil,   nil,    24,    39,    55,   nil,   nil,   nil,    34,   nil,
   nil,   nil,    55,    28,    55,    25,   nil,    34,   nil,    26,
   nil,    28,    39,    28,   nil,   nil,   nil,    34,   nil,   nil,
   nil,    39,   nil,    27,   nil,    34,   nil,    34,   nil,    26,
   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,    25,    39,
    27,    39,    26,    24,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    25,   nil,   nil,    25,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,    32,    27,   nil,
   nil,    24,    32,   nil,   nil,   nil,    27,   nil,    27,    24,
   nil,    24,   nil,   nil,    25,   nil,   nil,   nil,    26,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    32,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    32,    32,    32,    32,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    25,   nil,   nil,   nil,    26,   nil,    25,    25,   nil,   nil,
    26,    26,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    26,
   nil,    32,    32,    32,    32,    32,    32,    32,    32,   nil,
    32,    32,    32,   nil,    32,    32,    25,    32,    32,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    26,   nil,   nil,   nil,    32,   nil,    25,   nil,
   nil,   nil,    26,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,    26,
   nil,   nil,    25,   nil,   nil,   nil,    26,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,   nil,    26,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    26,   nil,   nil,   nil,    25,   nil,    25,   nil,    26,
   nil,    26,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,   nil,   nil,    32,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_pointer = [
   nil,    83,     1,    21,   -17,  -129,     8,   nil,   -22,   nil,
   -16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -17,    32,   131,   377,   381,   128,    53,   -53,
    38,   -30,   499,  -248,    67,     0,     3,  -110,    14,    81,
     1,   -66,  -181,   -90,  -165,   -74,   nil,    11,   -82,  -255,
   nil,   nil,   nil,  -113,   nil,    44,   -82,   nil,   nil,  -267,
     4,   -39,   -36,  -282,   nil,    11,  -192,  -203,   nil,   -93,
   -63,  -103,  -172,   -36,     6,   -10,  -110,    36,   -33,     2,
  -110,   -58,   -55,  -116,  -208,     2,   -68,   nil ]

racc_goto_default = [
   nil,   nil,   269,   182,    38,   nil,    47,    52,     4,     6,
    11,    17,    19,    25,    31,    37,    42,    46,    51,     3,
     5,   192,    16,   nil,    70,    73,    77,    80,    82,   nil,
   nil,    63,   151,   276,    69,    71,    74,    76,    79,    81,
    50,   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   185,
   298,   186,   177,   nil,   235,    67,   196,   198,   213,   214,
   nil,   nil,   nil,   nil,    62,     7,   nil,   nil,   320,    28,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   158 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  4, 83, :_reduce_50,
  5, 83, :_reduce_51,
  3, 83, :_reduce_52,
  2, 83, :_reduce_53,
  1, 99, :_reduce_54,
  3, 99, :_reduce_55,
  1, 98, :_reduce_56,
  3, 98, :_reduce_57,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  5, 75, :_reduce_69,
  5, 75, :_reduce_70,
  5, 75, :_reduce_71,
  5, 87, :_reduce_72,
  2, 76, :_reduce_73,
  1, 115, :_reduce_74,
  2, 115, :_reduce_75,
  6, 77, :_reduce_76,
  2, 77, :_reduce_77,
  3, 116, :_reduce_78,
  3, 116, :_reduce_79,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_82,
  1, 118, :_reduce_none,
  3, 118, :_reduce_84,
  1, 119, :_reduce_85,
  1, 119, :_reduce_86,
  3, 120, :_reduce_87,
  3, 120, :_reduce_88,
  1, 121, :_reduce_none,
  1, 121, :_reduce_none,
  4, 122, :_reduce_91,
  1, 110, :_reduce_92,
  3, 110, :_reduce_93,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 108, :_reduce_96,
  1, 103, :_reduce_97,
  1, 104, :_reduce_98,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 78, :_reduce_106,
  3, 78, :_reduce_107,
  3, 88, :_reduce_108,
  0, 112, :_reduce_109,
  1, 112, :_reduce_110,
  3, 112, :_reduce_111,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 125, :_reduce_115,
  3, 127, :_reduce_116,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 114, :_reduce_119,
  1, 114, :_reduce_120,
  3, 114, :_reduce_121,
  4, 107, :_reduce_122,
  3, 107, :_reduce_123,
  1, 95, :_reduce_124,
  2, 95, :_reduce_125,
  2, 129, :_reduce_126,
  1, 130, :_reduce_127,
  2, 130, :_reduce_128,
  1, 105, :_reduce_129,
  4, 93, :_reduce_130,
  4, 93, :_reduce_131,
  5, 81, :_reduce_132,
  4, 81, :_reduce_133,
  2, 80, :_reduce_134,
  5, 131, :_reduce_135,
  4, 131, :_reduce_136,
  0, 132, :_reduce_none,
  2, 132, :_reduce_138,
  4, 132, :_reduce_139,
  3, 132, :_reduce_140,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 101, :_reduce_143,
  3, 101, :_reduce_144,
  3, 101, :_reduce_145,
  3, 101, :_reduce_146,
  3, 101, :_reduce_147,
  3, 101, :_reduce_148,
  3, 101, :_reduce_149,
  3, 101, :_reduce_150,
  3, 101, :_reduce_151,
  2, 101, :_reduce_152,
  3, 101, :_reduce_153,
  3, 101, :_reduce_154,
  3, 101, :_reduce_155,
  3, 101, :_reduce_156,
  3, 101, :_reduce_157,
  3, 101, :_reduce_158,
  2, 101, :_reduce_159,
  3, 101, :_reduce_160,
  3, 101, :_reduce_161,
  3, 101, :_reduce_162,
  5, 79, :_reduce_163,
  1, 135, :_reduce_164,
  2, 135, :_reduce_165,
  5, 136, :_reduce_166,
  4, 136, :_reduce_167,
  1, 137, :_reduce_168,
  3, 137, :_reduce_169,
  3, 96, :_reduce_170,
  1, 139, :_reduce_none,
  4, 139, :_reduce_172,
  1, 141, :_reduce_none,
  3, 141, :_reduce_174,
  3, 140, :_reduce_175,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_184,
  1, 138, :_reduce_none,
  1, 142, :_reduce_186,
  1, 143, :_reduce_none,
  3, 143, :_reduce_188,
  2, 82, :_reduce_189,
  6, 84, :_reduce_190,
  5, 84, :_reduce_191,
  7, 85, :_reduce_192,
  6, 85, :_reduce_193,
  6, 86, :_reduce_194,
  5, 86, :_reduce_195,
  1, 109, :_reduce_196,
  1, 109, :_reduce_197,
  1, 146, :_reduce_198,
  3, 146, :_reduce_199,
  1, 148, :_reduce_200,
  1, 149, :_reduce_201,
  1, 149, :_reduce_202,
  1, 149, :_reduce_203,
  1, 149, :_reduce_none,
  0, 72, :_reduce_205,
  0, 150, :_reduce_206,
  1, 144, :_reduce_none,
  3, 144, :_reduce_208,
  4, 144, :_reduce_209,
  1, 151, :_reduce_none,
  3, 151, :_reduce_211,
  3, 152, :_reduce_212,
  1, 152, :_reduce_213,
  1, 147, :_reduce_none,
  2, 147, :_reduce_215,
  1, 145, :_reduce_none,
  2, 145, :_reduce_217,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 94, :_reduce_220,
  3, 106, :_reduce_221,
  4, 106, :_reduce_222,
  2, 106, :_reduce_223,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  0, 113, :_reduce_none,
  1, 113, :_reduce_227,
  1, 134, :_reduce_228,
  3, 133, :_reduce_229,
  4, 133, :_reduce_230,
  2, 133, :_reduce_231,
  1, 154, :_reduce_none,
  3, 154, :_reduce_233,
  3, 155, :_reduce_234,
  1, 156, :_reduce_235,
  1, 156, :_reduce_236,
  4, 124, :_reduce_237,
  1, 97, :_reduce_none,
  4, 97, :_reduce_239 ]

racc_reduce_n = 240

racc_shift_n = 399

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "unlessstatement",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "keyword",
  "relationship_side",
  "edge",
  "resourceref",
  "variable",
  "quotedtext",
  "selector",
  "hasharrayaccesses",
  "expressions",
  "funcvalues",
  "rvalue",
  "expression",
  "comma",
  "name",
  "type",
  "boolean",
  "array",
  "funcrvalue",
  "undef",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "resourceinst",
  "resourcename",
  "hasharrayaccess",
  "param",
  "param_name",
  "addparam",
  "anyparam",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "hash",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'grammar.ra', 89)
  def _reduce_36(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 92)
  def _reduce_37(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'grammar.ra', 107)
  def _reduce_50(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 114)
  def _reduce_51(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 120)
  def _reduce_52(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 127)
  def _reduce_53(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 134)
  def _reduce_54(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 137)
  def _reduce_55(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 141)
  def _reduce_56(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_57(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 157)
  def _reduce_69(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 160)
  def _reduce_70(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 163)
  def _reduce_71(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0].value, :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 170)
  def _reduce_72(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 177)
  def _reduce_73(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 194)
  def _reduce_75(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 199)
  def _reduce_76(val, _values, result)
      @lexer.commentpop
  type = val[0].value.downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_77(val, _values, result)
      type = val[0].value.downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 235)
  def _reduce_78(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 243)
  def _reduce_79(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 256)
  def _reduce_82(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 83 omitted

module_eval(<<'.,.,', 'grammar.ra', 261)
  def _reduce_84(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_85(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_86(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_87(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 274)
  def _reduce_88(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_91(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 286)
  def _reduce_92(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_93(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_96(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 300)
  def _reduce_97(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 304)
  def _reduce_98(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

module_eval(<<'.,.,', 'grammar.ra', 316)
  def _reduce_106(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_107(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_108(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 332)
  def _reduce_109(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 334)
  def _reduce_110(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 336)
  def _reduce_111(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_115(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 349)
  def _reduce_116(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_119(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_120(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_121(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 368)
  def _reduce_122(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 373)
  def _reduce_123(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 379)
  def _reduce_124(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 380)
  def _reduce_125(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_126(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_127(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 385)
  def _reduce_128(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_129(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 392)
  def _reduce_130(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 395)
  def _reduce_131(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0].value, :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 399)
  def _reduce_132(val, _values, result)
      @lexer.commentpop
  args = {
    :test => ast(AST::Not, :value => val[1]),
    :statements => val[3]
  }

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 408)
  def _reduce_133(val, _values, result)
        @lexer.commentpop
    args = {
      :test => ast(AST::Not, :value => val[1]), 
      :statements => ast(AST::Nop)
    }
    result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 417)
  def _reduce_134(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 421)
  def _reduce_135(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_136(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 137 omitted

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_138(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_139(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_140(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'grammar.ra', 471)
  def _reduce_143(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_144(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 477)
  def _reduce_145(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 480)
  def _reduce_146(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 483)
  def _reduce_147(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 486)
  def _reduce_148(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 489)
  def _reduce_149(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 492)
  def _reduce_150(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 495)
  def _reduce_151(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 498)
  def _reduce_152(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 501)
  def _reduce_153(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 504)
  def _reduce_154(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 507)
  def _reduce_155(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 510)
  def _reduce_156(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 513)
  def _reduce_157(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 516)
  def _reduce_158(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_159(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 522)
  def _reduce_160(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 525)
  def _reduce_161(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 528)
  def _reduce_162(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 532)
  def _reduce_163(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_164(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 538)
  def _reduce_165(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 543)
  def _reduce_166(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_167(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 556)
  def _reduce_168(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 558)
  def _reduce_169(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_170(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'grammar.ra', 568)
  def _reduce_172(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 574)
  def _reduce_174(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_175(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'grammar.ra', 595)
  def _reduce_184(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 185 omitted

module_eval(<<'.,.,', 'grammar.ra', 600)
  def _reduce_186(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'grammar.ra', 602)
  def _reduce_188(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_189(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 615)
  def _reduce_190(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 623)
  def _reduce_191(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 631)
  def _reduce_192(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 638)
  def _reduce_193(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 647)
  def _reduce_194(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 652)
  def _reduce_195(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_196(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 657)
  def _reduce_197(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 662)
  def _reduce_198(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_199(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 670)
  def _reduce_200(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_201(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 204 omitted

module_eval(<<'.,.,', 'grammar.ra', 679)
  def _reduce_205(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_206(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 207 omitted

module_eval(<<'.,.,', 'grammar.ra', 688)
  def _reduce_208(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 691)
  def _reduce_209(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 697)
  def _reduce_211(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_212(val, _values, result)
     result = [val[0][:value], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_213(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_215(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 216 omitted

module_eval(<<'.,.,', 'grammar.ra', 713)
  def _reduce_217(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

module_eval(<<'.,.,', 'grammar.ra', 719)
  def _reduce_220(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 722)
  def _reduce_221(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_222(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_223(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 730)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_228(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 737)
  def _reduce_229(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 744)
  def _reduce_230(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 750)
  def _reduce_231(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 755)
  def _reduce_233(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 764)
  def _reduce_234(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_235(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 768)
  def _reduce_236(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_237(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'grammar.ra', 776)
  def _reduce_239(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
